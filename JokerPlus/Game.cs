//------------------------------------------------------------------------------
// <auto-generated>
//     O código foi gerado por uma ferramenta.
//     Versão de Tempo de Execução:4.0.30319.544
//
//     As alterações ao arquivo poderão causar comportamento incorreto e serão perdidas se
//     o código for gerado novamente.
// </auto-generated>
//------------------------------------------------------------------------------
using System;
using System.Collections.Generic;

namespace CGME
{
	public class Game
	{
		// PRIVATE VARIABLES -----------------------------------------------------
		private List<CGME.Ruleset> rulesets = new List<CGME.Ruleset>();
		private List<CGME.Player> players = new List<CGME.Player>();

		// CONSTRUCTORS -----------------------------------------------------------

		public Game ()
		{

		}

		// GET/SET FUNCTIONS -----------------------------------------------------

		// RULESETS ---------------

		public Ruleset GetRuleset(CGME.Ruleset _ruleset){
			
			foreach (var ruleset in rulesets) {
				if (ruleset == _ruleset)
					return ruleset;
			}
			
			return null;
		}
		
		public Ruleset GetRuleset(string name){
			foreach (var ruleset in rulesets) {
				if (ruleset.Name == name)
					return ruleset;
			}
			
			return null;
		}

		public Ruleset GetRuleset(int index){
			return rulesets[index];
		}
		
		public int Rulesets_Size{
			get { return rulesets.Count;}
		}

		// PLAYERS -----------------

		public Player GetPlayer(CGME.Player _player){
			
			foreach (var player in players) {
				if (player == _player)
					return player;
			}
			
			return null;
		}
		
		public Player GetPlayer(string name){
			foreach (var player in players) {
				//CGME.GameManager.DebugLog("DEBUG - GET PLAYER, NAME == "+ player.Name);
				if (player.Name == name)
					return player;
			}
			
			return null;
		}

		public Player GetPlayer(int index){
			return players[index];
		}
		
		public int Players_Size{
			get { return players.Count;}
		}

		// LIST FUNCTIONS --------------------------------------------------------

		// RULESETS --------------
		public CGME.Ruleset AddRuleset(CGME.Ruleset new_ruleset){
			rulesets.Add(new_ruleset);
			return new_ruleset;
		}
		
		public void RemoveRuleset(CGME.Ruleset ruleset){
			rulesets.Remove(ruleset);
		}
		
		public void RemoveRuleset(int index){
			rulesets.RemoveAt(index);
		}
				
		public void ClearRulesets(){
			rulesets.Clear();
		}

		// PLAYERS --------------
		public CGME.Player AddPlayer(CGME.Player new_player){
			players.Add(new_player);
			return new_player;
		}
		
		public CGME.Player AddPlayer(string name){
			Player new_player = new Player(name);
			players.Add(new_player);
			return new_player;
		}
		
		public void RemovePlayer(CGME.Player player){
			players.Remove(player);
		}
		
		public void RemovePlayer(int index){
			players.RemoveAt(index);
		}
				
		public void ClearPlayers(){
			players.Clear();
		}

		// PUBLIC FUNCTIONS
		
		public void AddResource (Resource resource, string target){
			
			Actor actor = FindActor(target);
			
			if (actor != null) 
				actor.AddResource(resource);
			
		}
		
		public Actor FindActor(string actor_name){
		
			foreach (Ruleset ruleset in rulesets){
				if (ruleset.FindActor(actor_name)!= null) return (Actor)ruleset;
			}
			
			foreach (Player player in players){
				if (player.FindActor(actor_name)!= null) return (Actor)player;
			}
			
			return null;
		}

	}
}

