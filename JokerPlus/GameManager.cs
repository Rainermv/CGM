//------------------------------------------------------------------------------
// <auto-generated>
//     O código foi gerado por uma ferramenta.
//     Versão de Tempo de Execução:4.0.30319.544
//
//     As alterações ao arquivo poderão causar comportamento incorreto e serão perdidas se
//     o código for gerado novamente.
// </auto-generated>
//------------------------------------------------------------------------------
using System;
using System.Collections;
using UnityEngine;

namespace CGME
{
	public class GameManager
	{
		// PRIVATE VARIABLES ----------------------------------------
		private static CGME.GameManager instance = null;

		//TODO NOT PUBLIC
		private CGME.Game game =  null;

		private CGME.Ruleset running_ruleset = null;
		private CGME.Phase running_phase = null;
		//private CGME.Action current_action = null;

		private int ruleset_controller = 0;
		private int phase_controller = 0;
		//private int action_controller = 0;

		// TEMP
		public int lastvalue = 0;

		// CONSTRUCTORS ----------------------------------------

		private GameManager ()
		{

			Debug.Log ("Game Manager instantiated");
		}

		// GET/SET FUNCTIONS ----------------------------------------

		public static CGME.GameManager GetInstance(){
			if (instance == null)
				instance = new GameManager();
			
			return instance;
			
		}

		public CGME.Ruleset Running_ruleset{
			get{return running_ruleset;}
		}

		public CGME.Phase Running_phase{
			get{return running_phase;}
		}

		public int Ruleset_Controller{
			get{return ruleset_controller;}
			set{ruleset_controller = value;}
		}

		public int Phase_Controller{
			get{return phase_controller;}
			set{phase_controller = value;}
		}

		// PRIVATE FUNCTIONS -----------------------------------------

		public bool DefineRuleset(CGME.Ruleset ruleset){
			if (ruleset == null){
				Debug.Log("Error - ruleset failed to load");
				return false;
			}
				
			running_ruleset = ruleset;
			Debug.Log ("SETTING NEW RULESET: " + running_ruleset.Name);
			return true;
		}

		public bool DefinePhase(CGME.Phase phase){
			if (phase == null){
				Debug.Log("Error - phase failed to load");
				return false;
			}
				
			running_phase = phase;
			running_phase.Start();
			Debug.Log ("SETTING NEW PHASE: " + running_phase.Name);
			return true;
		}

		// PUBLIC FUNCTIONS ------------------------------------------
		public bool Start() // inicia os parametros do jogo
		{
			Debug.Log("GM start");
			game = GameBuilder.Build();

			if (game == null){
				Debug.Log("Error - game failed to load");
				return false;
			}
				
			for (int game_index = 0; game_index < game.Rulesets_Size; game_index++){ // FOR EACH RULESET

				CGME.Ruleset ruleset = game.GetRuleset(game_index);
				Debug.Log ("RULESET:" + ruleset.Name + DebugRes(ruleset));

				for (int rule_index = 0; rule_index < ruleset.Phases_Size; rule_index++){ // FOR EACH PHASE
				
					CGME.Phase phase = ruleset.GetPhase(rule_index);
					Debug.Log ("-----PHASE: " + phase.Name + DebugRes(phase));

					for (int phase_index = 0; phase_index < phase.Actions_Size; phase_index++) {// FOR EACH ACTION

						CGME.Action action = phase.GetAction(phase_index);
						Debug.Log ("-------------ACTION:" + action.Name + DebugRes(action));
					}

				}
			}

			for (int game_index = 0; game_index < game.Players_Size; game_index++){ // FOR EACH PLAYER

				CGME.Player player = game.GetPlayer (game_index);
				Debug.Log ("PLAYER: " + player.Name + DebugRes(player));

				for (int player_index = 0; player_index < player.Decks_Size; player_index++){ // FOR EACH DECK
					
					CGME.Deck deck = player.GetDeck(player_index);
					Debug.Log ("------DECK: " + deck.Name + DebugRes(deck));
					
					for (int deck_index = 0; deck_index < deck.Cards_Size; deck_index++) {// FOR EACH CARD
						
						CGME.Card card = deck.GetCard(deck_index);
						Debug.Log ("--------------CARD:" + card.Name + DebugRes(card));
					}
				}
			}
			
			if (!DefineRuleset(game.GetRuleset(0)))// play the first ruleset by default
				return false;

			if (!DefinePhase(running_ruleset.GetPhase(0))) // play the first phase by default
				return false;
		
			return true;
		}

		// End phase
		public void EndPhase()
		{
			running_phase.End();

		}

		// End phase and call next phase in the ruleset
		public void NextPhase()
		{
			do{// get the next enabled phase
				EndPhase();
				DefinePhase(running_ruleset.NextPhase());
			}while (running_phase.Enabled == false)	;	
		}



	
		public void Update(int rule_index) // atualiza o jogo
		{

			running_phase.Update ();

			//Debug.Log (running_ruleset.phase_iterator);
			if ((running_phase.Enabled == false) || (running_phase.IsFinished == true)){// if the phase ended or was disabled

				NextPhase(); // loads the next phase in the list
			}  

			// TEMP

			CGME.Player player = game.GetPlayer("Human Player");
			CGME.Resource<int> life = new Resource<int>();

			//player = game.GetPlayer("Human Player");
			life = (CGME.Resource<int>)player.GetResource("Life Points");

			if (life.Value != lastvalue){
				Debug.Log (player.Name + " hit points: " + life.Value);
				lastvalue = life.Value;
			}
		}
		
		public void EndGame() // finaliza o jogo
		{
			Debug.Log ("ENDING GAME");
			Application.Quit();
		}

		// TEMP FUNCTIONS -----------------------------------

		public bool SpacePress(){
			if (Input.GetKeyDown("e"))
				return true;
			return false;
		}

		public static void DebugLog(string log)
		{
			Debug.Log(log);
		}

		public static string DebugRes(CGME.Actor actor){
			string log = "";
			if (actor.Resources_Size > 0){
				log = "|| Resources: ";
				foreach (CGME.Resource resource in actor.Resources){
					string name = resource.Name;
					if (resource is CGME.Resource<string>){
						CGME.Resource<string> s_res = (CGME.Resource<string>)resource;
						log += name + ": " + s_res.Value + "|| ";
					}
					if (resource is CGME.Resource<int>){
						CGME.Resource<int> s_res = (CGME.Resource<int>)resource;
						log += name + ": " + s_res.Value + "|| ";	
					}
					if (resource is CGME.Resource<float>){
						CGME.Resource<float> s_res = (CGME.Resource<float>)resource;
						log += name + ": " + s_res.Value + "|| ";
					}
				}

			}
			return log;
		}
	}
}

