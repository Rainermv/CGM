//------------------------------------------------------------------------------
// <auto-generated>
//     O código foi gerado por uma ferramenta.
//     Versão de Tempo de Execução:4.0.30319.544
//
//     As alterações ao arquivo poderão causar comportamento incorreto e serão perdidas se
//     o código for gerado novamente.
// </auto-generated>
//------------------------------------------------------------------------------
using System;
using System.Collections.Generic;
//using Action;

namespace CGME
{
	public class Phase : CGME.Actor

	{
		//CONSTANT ----------------------------------------
		private const int PRIORITY_MIN = 0;
		private const int PRIORITY_MAX = 10;

		//PRIVATE VARIABLES -------------------------------

		private int priority;
		private int iterator;

		private bool init;
		private bool finished;

		private List<CGME.Action> actions = new List<CGME.Action>();

		// CONSTRUCTORS ----------------------------------

		public Phase(string name, bool enabled = true){
			Name = name;
			Enabled = enabled;

			//Priority = 0;
			iterator = 0;

			init = false;
			finished = false;
		}

		// GET/SET FUNCTIONS -----------------------------

		public bool IsFinished{
			get{return finished;}
		}

		public bool Init{
			get{return init;}
			//set{init = value;}
		}


		public List<CGME.Action> Actions{
			get{return actions;}
		}

//		public bool End{
//			get {return end;}
//			set {end = value;}
//		}

//		public int Priority
//		{
//			get { return priority;}
//			set {
//				if (value < PRIORITY_MIN)		priority = PRIORITY_MIN;
//				else if (value > PRIORITY_MAX) 	priority = PRIORITY_MAX;
//				else 							priority = value;
//			}
//		}

		public Action GetAction(CGME.Action _action){
				
			foreach (var action in actions) {
				if (action == _action)
					return action;
			}
			
			return null;
		}

		public Action GetAction(string name){
			
			foreach (var action in actions) {
				if (action.Name == name)
					return action;
			}
			
			return null;
		}

		public Action GetAction(int index){
			return actions[index];
		}

		public int Actions_Size{
			get { return actions.Count;}
		}

		// LIST FUNCTIONS ----------------------------------------

		public void AddAction(CGME.Action new_action){
			actions.Add(new_action);
		}

		public void RemoveAction(CGME.Action action){
			actions.Remove(action);
		}

		public void RemoveAction(int index){
			actions.RemoveAt(index);
		}

		public void ClearActions(){
			actions.Clear();
		}

		// PRIVATE FUNCTIONS -------------------------------------

		public void Start()
		{
			finished = false;
			iterator = 0;

			init = true;
		} 

		public void End()
		{
			finished = true;

		}

//		private bool IncrementPriority()
//		{
//			if (Priority >= PRIORITY_MAX)
//				return false;
//			else {
//				Priority++;
//				return true;
//			}
//
//		}

		private bool Iterate()
		{   
			iterator++;
			if (iterator >= Actions_Size)
			{
				iterator = 0;
				//return IncrementPriority();;
			}
			return true;

		}

		// PUBLIC FUNCTIONS -------------------------------------

		public CGME.Action NextAction(){
		
			CGME.Action action = GetAction(iterator);
			Iterate();
			return action;
		}
		// Check and run the game actions
		public bool CheckActions()
		{
			foreach (CGME.Action action in Actions){
			    			
			    if (action.Run() == true) 
			    	return true;
			}
			
			return false;
		}

		public void Update()
		{
			// CHECK ALL THE ACTIONS
			CheckActions();
			
		}
		
		public Actor FindActor(string actor_name){
			
			if (this.Name == actor_name) return this;
			
			foreach (Action actor in actions){
				if (actor.FindActor(actor_name) != null) return (Actor)actor;
			}
			
			return null;
		}


	}
}

