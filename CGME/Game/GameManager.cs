//------------------------------------------------------------------------------
// <auto-generated>
//     O código foi gerado por uma ferramenta.
//     Versão de Tempo de Execução:4.0.30319.544
//
//     As alterações ao arquivo poderão causar comportamento incorreto e serão perdidas se
//     o código for gerado novamente.
// </auto-generated>
//------------------------------------------------------------------------------
using System;
using System.Collections;
using UnityEngine;

namespace CGME
{
	public class GameManager
	{
		// PRIVATE VARIABLES ----------------------------------------
		private static CGME.GameManager instance = null;

		//TODO NOT PUBLIC
		private CGME.Game game =  null;

		//private CGME.Ruleset running_ruleset = null;
		private CGME.Phase running_phase = null;
		//private bool end_phase_command = false;
		//private CGME.Action current_action = null;

		private int phase_controller = 0;
		//private int action_controller = 0;

		// TEMP
		public int lastvalue = 0;

		// CONSTRUCTORS ----------------------------------------

		private GameManager ()
		{

			Debug.Log ("Game Manager instantiated");
		}

		// GET/SET FUNCTIONS ----------------------------------------

		public static CGME.GameManager GetInstance(){
			if (instance == null)
				instance = new GameManager();
			
			return instance;
			
		}

		public CGME.Phase Running_phase{
			get{return running_phase;}
		}

		public int Phase_Controller{
			get{return phase_controller;}
			set{phase_controller = value;}
		}

		// PRIVATE FUNCTIONS -----------------------------------------


		private bool DefinePhase(CGME.Phase phase){
			if (phase == null){
				Debug.Log("Error - phase failed to load");
				return false;
			}
			
			StartPhase(phase);
			Debug.Log ("SETTING NEW PHASE: " + running_phase.Name);
			return true;
		}
		
		// Start the new phase
		private void StartPhase(Phase phase){
			running_phase = phase;
			running_phase.Start ();
		}
		
		// End phase
		private void EndPhase()
		{
			running_phase.End();
			
		}
		
		// End phase and call next phase
		private void NextPhase()
		{
			do{// get the next enabled phase
				EndPhase();
				DefinePhase(game.NextPhase());
			}while (running_phase.Enabled == false);
			
		}

		// PUBLIC FUNCTIONS ------------------------------------------
		public bool Start() // inicia os parametros do jogo
		{
			Debug.Log("GM start");
			game = GameBuilder.Build();

			if (game == null){
				Debug.Log("Error - game failed to load");
				return false;
			}
			
			game.Enable (true);
				
			for (int rule_index = 0; rule_index < game.Phases_Size; rule_index++){ // FOR EACH PHASE
				
					CGME.Phase phase = game.GetPhase(rule_index);
					Debug.Log ("-----PHASE: " + phase.Name + DebugRes(phase));

					for (int phase_index = 0; phase_index < phase.Actions_Size; phase_index++) {// FOR EACH ACTION

						CGME.Action action = phase.GetAction(phase_index);
						Debug.Log ("-------------ACTION:" + action.Name + DebugRes(action));
					}

			}
			

			for (int game_index = 0; game_index < game.Players_Size; game_index++){ // FOR EACH PLAYER

				CGME.Player player = game.GetPlayer (game_index);
				Debug.Log ("PLAYER: " + player.Name + DebugRes(player));

				for (int player_index = 0; player_index < player.Decks_Size; player_index++){ // FOR EACH DECK
					
					CGME.Deck deck = player.GetDeck(player_index);
					Debug.Log ("------DECK: " + deck.Name + DebugRes(deck));
					
					for (int deck_index = 0; deck_index < deck.Cards_Size; deck_index++) {// FOR EACH CARD
						
						CGME.Card card = deck.GetCard(deck_index);
						Debug.Log ("--------------CARD:" + card.Name + DebugRes(card));
						
					}
				}
			}
			
			if (!DefinePhase(game.GetPhase(0))) // play the first phase by default
				return false;
		
			return true;
		}
		
		
	
		public void Update(int rule_index) // atualiza o jogo
		{

			running_phase.Update ();

			//Debug.Log (running_ruleset.phase_iterator);
			if ((running_phase.Enabled == false) || (running_phase.IsFinished == true)){// if the phase ended or was disabled

				NextPhase(); // loads the next phase in the list
			}  

			// TEMP

			CGME.Player player = game.GetPlayer("Human Player");
			//CGME.ResourceNumber life = new ResourceNumber();

			//player = game.GetPlayer("Human Player");
			CGME.ResourceNumber life = (CGME.ResourceNumber)player.GetResource("Life Points");

			if (life.Value != lastvalue){
				Debug.Log (player.Name + " hit points: " + life.Value);
				lastvalue = life.Value;
			}
		}
		
		public void EndGame() // finaliza o jogo
		{
			Debug.Log ("ENDING GAME");
			Application.Quit();
		}
		
		// COMMAND FUNCTIONS
		
		public void CommandEndPhase(){
			EndPhase();
		}
		
		public void AddAction(Action action, string phase){
		
			game.GetPhase(phase).AddAction(action)	;		
		}
		
		public void RemoveAction(Action action, string phase){
		
			game.GetPhase(phase).RemoveAction(action);
		}

		// TEMP FUNCTIONS -----------------------------------

		public bool SpacePress(){
			if (Input.GetKeyDown("e"))
				return true;
			return false;
		}

		public static void DebugLog(string log)
		{
			Debug.Log(log);
		}

		public static string DebugRes(CGME.Actor actor){
			string log = "";
			if (actor.Resources_Size > 0){
				log = "|| Resources: ";
				foreach (CGME.Resource resource in actor.Resources){
					log += ("(|" + resource.ToString());
//				
				}

			}
			return log;
		}
	}
}

