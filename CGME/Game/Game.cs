//------------------------------------------------------------------------------
// <auto-generated>
//     O código foi gerado por uma ferramenta.
//     Versão de Tempo de Execução:4.0.30319.544
//
//     As alterações ao arquivo poderão causar comportamento incorreto e serão perdidas se
//     o código for gerado novamente.
// </auto-generated>
//------------------------------------------------------------------------------
using System;
using System.Collections.Generic;

namespace CGME
{
	public class Game
	{
		// PRIVATE VARIABLES -----------------------------------------------------
		//private List<CGME.Ruleset> rulesets = new List<CGME.Ruleset>();
		//private Ruleset
		private List<CGME.Phase> phases = new List<CGME.Phase>();
		private List<CGME.Player> players = new List<CGME.Player>();
		
		public int phase_iterator = 0;

		// CONSTRUCTORS -----------------------------------------------------------

		public Game ()
		{

		}

		// GET/SET FUNCTIONS -----------------------------------------------------

		// PHASES ---------------
		
		public Phase GetPhase(CGME.Phase _phase){
			
			foreach (var phase in phases) {
				if (phase == _phase)
					return phase;
			}
			
			return null;
		}
		
		public Phase GetPhase(string name){
			foreach (var phase in phases) {
				if (phase.Name == name)
					return phase;
			}
			
			return null;
		}
		
		public Phase GetPhase(int index){
			return phases[index];
		}
		
		public int Phases_Size{
			get { return phases.Count;}
		}
		
		// PLAYERS -----------------

		public Player GetPlayer(CGME.Player _player){
			
			foreach (var player in players) {
				if (player == _player)
					return player;
			}
			
			return null;
		}
		
		public Player GetPlayer(string name){
			foreach (var player in players) {
				//CGME.GameManager.DebugLog("DEBUG - GET PLAYER, NAME == "+ player.Name);
				if (player.Name == name)
					return player;
			}
			
			return null;
		}

		public Player GetPlayer(int index){
			return players[index];
		}
		
		public int Players_Size{
			get { return players.Count;}
		}

		// LIST FUNCTIONS --------------------------------------------------------

		// PHASES --------------
		
		public void AddPhase(CGME.Phase new_phase){
			phases.Add(new_phase);
		}
		
		public void RemovePhase(CGME.Phase phase){
			phases.Remove(phase);
		}
		
		public void RemovePhase(int index){
			phases.RemoveAt(index);
		}
		
		public void ClearPhases(){
			phases.Clear();
		}

		// PLAYERS --------------
		public CGME.Player AddPlayer(CGME.Player new_player){
			players.Add(new_player);
			return new_player;
		}
		
		public CGME.Player AddPlayer(string name){
			Player new_player = new Player(name);
			players.Add(new_player);
			return new_player;
		}
		
		public void RemovePlayer(CGME.Player player){
			players.Remove(player);
		}
		
		public void RemovePlayer(int index){
			players.RemoveAt(index);
		}
				
		public void ClearPlayers(){
			players.Clear();
		}

		// PUBLIC FUNCTIONS
		
		private void Iterate(){
			
			phase_iterator++;  // go to next phase
			if (phase_iterator >= Phases_Size)
				phase_iterator = 0;  // go to phase zero
			
		}
		
		public CGME.Phase NextPhase(){
			
			CGME.Phase phase = GetPhase(phase_iterator);
			Iterate();
			return phase;
			
		}
		
		public void AddResource (Resource resource, string target){
		
			//GameManager.DebugLog("Game add resource to" + " :: " + target);
			
			Actor actor = FindActor(target);
			
			if (actor != null) {
				actor.AddResource(resource);
				
				GameManager.DebugLog ("Adding " + resource.Name + " to " + actor.Name);
			}
				
			
		}
		
		public Actor FindActor(string actor_name){
		
			//GameManager.DebugLog("Game find 1" + " :: " + actor_name);
		
			foreach (Phase actor in phases){
				Actor found = actor.FindActor(actor_name);
				if (found != null) {
					//GameManager.DebugLog("Returning " + found.Name);
					return found;
				}
			}
			
			//GameManager.DebugLog("Game find 2" + " :: " + actor_name);
			
			foreach (Player actor in players){
				Actor found = actor.FindActor(actor_name);
				if (found != null) {
					//GameManager.DebugLog("Returning " + found.Name);
					return found;
				}
			}
			
			return null;
		}
		
		public void Enable(bool enable){
		
			//this.enabled = enable;
		
			foreach (Player player in players){
				player.Enable(enable);
			}
			foreach (Phase phase in phases){
				phase.Enable(enable);
			}
		}
	}

	
}

